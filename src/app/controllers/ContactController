const ContactRepository = require('../Repositorry/ContactRepository');

class ContactControllers {
  async index(request, response) {
    const contacts = await ContactRepository.findAll();
    response.json(contacts);
    // Listar todos os registros
  }

  async show(request, response) {
    const { id } = request.params;

    const contact = await ContactRepository.findById(id);

    if (!contact) {
      return response.status(404).json({ error: 'User Not fount' });
    }
    response.json(contact);
  }

  async store(request, response) {
    const {name ,email, phone, catyegory_id } = request.body;

if (!name){
  return response.status(400).json({error: 'Name is required'});
}

    const contactExists = await ContactRepository.findByEmail(email);

    if (contactExists) {
      return response.status(400).json({error: 'This e-mail is alredy been taken'})
    }

    const contact = await ContactRepository.create({
      name ,email, phone, catyegory_id,
    });
       response.json(contact);

  }

  async update(request, response) {
    const {id} = request.params;
    const{
      name ,email, phone, catyegory_id,} = request.body;

    const contactExists = await ContactRepository.findById(id);
    if (!contactExists) {
      return response.status(404).json({error: 'User not found'});
    }

    if (!name){
      return response.status(400).json({error: 'Name is required'});
    }

    const contactByEmail = await ContactRepository.findByEmail(email);
    if (contactByEmail && contactByEmail.id !== id) {
      return response.status(400).json({error: 'This e-mail is alredy in use'});
    }

    const contact = await ContactRepository.update(id, {
      name ,email, phone, catyegory_id,
    });
    response.json(contact);
  }

  async delete(request , response) {
    const {id} = request.params;
    const contact = await ContactRepository.findById(id);

    if (!contact) {
      return response.status(404).json({ error: 'User Not fount' });
    }

    await ContactRepository.delete(id);

    response.sendStatus(204);
  }
}
// singleton
module.exports = new ContactControllers();